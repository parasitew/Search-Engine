	{
    /*
     *  The code below is an unorganized set of examples that show
     *  you different ways of accessing the index.  Some of these
     *  are only useful in HW2 or HW3.
     */

			// Lookup the document length of the body field of doc 0.
			System.out.println(s.getDocLength("body", 0));

			// How to use the term vector.
			TermVector tv = new TermVector(1, "body");
			System.out.println(tv.stemString(10)); // get the string for the 10th stem
			System.out.println(tv.stemDf(10)); // get its df
			System.out.println(tv.totalStemFreq(10)); // get its ctf

			/**
			 *  The index is open. Start evaluating queries. The examples
			 *  below show query trees for two simple queries.  These are
			 *  meant to illustrate how query nodes are created and connected.
			 *  However your software will not create queries like this.  Your
			 *  software will use a query parser.  See parseQuery.
			 *
			 *  The general pattern is to tokenize the  query term (so that it
			 *  gets converted to lowercase, stopped, stemmed, etc), create a
			 *  Term node to fetch the inverted list, create a Score node to
			 *  convert an inverted list to a score list, evaluate the query,
			 *  and print results.
			 *
			 *  Modify the software so that you read a query from a file,
			 *  parse it, and form the query tree automatically.
			 */

			//  A one-word query.
			printResults("pea",
					(new QryopSlScore(
							new QryopIlTerm(tokenizeQuery("pea")[0]))).evaluate(model));

			//  A more complex query.
			printResults("#AND (aparagus broccoli cauliflower #SYN(peapods peas))",
					(new QryopSlAnd(
							new QryopIlTerm(tokenizeQuery("asparagus")[0]),
							new QryopIlTerm(tokenizeQuery("broccoli")[0]),
							new QryopIlTerm(tokenizeQuery("cauliflower")[0]),
							new QryopIlSyn(
									new QryopIlTerm(tokenizeQuery("peapods")[0]),
									new QryopIlTerm(tokenizeQuery("peas")[0])))).evaluate(model));

			//  A different way to create the previous query.  This doesn't use
			//  a stack, but it may make it easier to see how you would parse a
			//  query with a stack-based architecture.
			Qryop op1 = new QryopSlAnd();
			op1.add(new QryopIlTerm(tokenizeQuery("asparagus")[0]));
			op1.add(new QryopIlTerm(tokenizeQuery("broccoli")[0]));
			op1.add(new QryopIlTerm(tokenizeQuery("cauliflower")[0]));
			Qryop op2 = new QryopIlSyn();
			op2.add(new QryopIlTerm(tokenizeQuery("peapods")[0]));
			op2.add(new QryopIlTerm(tokenizeQuery("peas")[0]));
			op1.add(op2);
			printResults("#AND (aparagus broccoli cauliflower #SYN(peapods peas))",
					op1.evaluate(model));

			//  Using the example query parser.  Notice that this does no
			//  lexical processing of query terms.  Add that to the query
			//  parser.
			Qryop qTree;
			String query = new String("#AND(apple pie)");
			qTree = parseQuery(query);
			writeResults(query, qTree.evaluate(model), trecEvalOutputPath);
			printResults(query, qTree.evaluate(model));

    /*
     *  Create the trec_eval output.  Your code should write to the
     *  file specified in the parameter file, and it should write the
     *  results that you retrieved above.  This code just allows the
     *  testing infrastructure to work on QryEval.
     */
			BufferedWriter writer = null;

//		try {
//			writer = new BufferedWriter(new FileWriter(new File(trecEvalOutputPath)));
//
//			writer.write("1 Q0 clueweb09-enwp01-75-20596 1 1.0 run-1\n");
//			writer.write("1 Q0 clueweb09-enwp01-58-04573 2 0.9 run-1\n");
//			writer.write("1 Q0 clueweb09-enwp01-24-11888 3 0.8 run-1\n");
//			writer.write("2 Q0 clueweb09-enwp00-70-20490 1 0.9 run-1\n");
//		} catch (Exception e) {
//			e.printStackTrace();
//		} finally {
//			try {
//				writer.close();
//			} catch (Exception e) {
//			}
//		}

			// Later HW assignments will use more RAM, so you want to be aware
			// of how much memory your program uses.
		}